generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  bio      String?   @db.Text
  username String?   @unique @default(cuid())
  accounts Account[]
  sessions Session[]
  posts    Post[]
  likes    Like[]
  comments Comment[]

  @@index([id, username])
}

model Like {
  id        String   @id @default(cuid())
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], map: "Like_PostId_UserId_Index")
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  text      String   @db.Text
  likes     Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, userId], map: "Comment_PostId_userId_Index")
  @@index([userId, postId], map: "Comment_UserId_PostId_Index")
}

model Post {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  caption   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  images    Image[]
  comments  Comment[]

  @@index([userId], map: "Post_userId_Index")
}

model Image {
  id        String   @id
  postId    String
  url       String   @unique
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "Image_PostId_Index")
}

model Followers {
  // who the user follows
  followingId String @unique
  //who follows the user
  followerId  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
